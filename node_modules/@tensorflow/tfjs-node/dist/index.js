"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var tf = require("@tensorflow/tfjs");
var file_system_1 = require("./io/file_system");
var nodeIo = require("./io/index");
var node_http_1 = require("./io/node_http");
var nodejs_kernel_backend_1 = require("./nodejs_kernel_backend");
var nodeVersion = require("./version");
var bindings = require("bindings");
exports.version = __assign({}, tf.version, { 'tfjs-node': nodeVersion.version });
exports.io = __assign({}, tf.io, nodeIo);
__export(require("@tensorflow/tfjs"));
var pjson = require('../package.json');
tf.ENV.registerBackend('tensorflow', function () {
    return new nodejs_kernel_backend_1.NodeJSKernelBackend(bindings('tfjs_binding.node'), pjson.name);
}, 3);
if (tf.ENV.findBackend('tensorflow') != null) {
    tf.setBackend('tensorflow');
}
tf.io.registerLoadRouter(file_system_1.nodeFileSystemRouter);
tf.io.registerSaveRouter(file_system_1.nodeFileSystemRouter);
tf.io.registerLoadRouter(node_http_1.nodeHTTPRequestRouter);
var callbacks_1 = require("./callbacks");
tf.registerCallbackConstructor(1, callbacks_1.ProgbarLogger);
